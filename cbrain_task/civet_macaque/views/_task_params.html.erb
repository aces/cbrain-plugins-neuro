
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<% file_args = params[:file_args].presence || {} %>
<% if file_args.size > 1 && ! @task.new_record? %>
  <%= render :partial => task_partial(:deprecated_warning) %>
<% end %>

<%= form.params_hidden_field :collection_id %> <!-- can be nil -->

<%
  # Models
  default_models  = [ "icbm152nl_09s", "colin27", "icbm152nl", "icbm152l",
                      "ibis-v24", "ADNIhires", "NMTmacaque", "NCBRchimp" ]
  default_template = ["0.25","0.50"]
  default_lsq      = ["0", "6", "9", "12"]
  default_atlas    = ["CHARM3", "lobes", "AAL", "DKT", "D99", "CHARM1", "CHARM2", "CHARM4", "CHARM5", "CHARM6"]
%>



<!-- #################################################################### -->

<% if ! @task.new_record? %>
  <fieldset>
  <legend>Pipeline Options</legend>
      <%= form.params_label  :reset_from, "Restart from this stage:", :title => "Stage to restart from" %>
      <%= form.params_select :reset_from, [ "" ] + CbrainTask::Civet::StagesNames %>
  </fieldset>
  <P>
<% end %>



<!-- #################################################################### -->

  <fieldset>
  <legend>Input Options</legend>
      <%= form.params_label     :input_is_stx, "Input MincFiles are known to be already in stereotaxic space:",
                                :title => "Check this if you are sure the input files are already registered. This will skip the linear registration steps." %>
      <%= form.params_check_box :input_is_stx %>

      <br>

      <%= form.params_label     :pre_mask, "T1 image are known to be already in masked:",
                                :title => "Mask will be deduced from thresholding if no user-mask given." %>
      <%= form.params_check_box :pre_mask %>
  </fieldset>
  <P>

<!-- #################################################################### -->

  <fieldset>
  <legend>Output Options</legend>
      <%= form.params_label     :nii_output, "Output NIfTI files:",
                                :title => "Output NNIfTI files." %>
      <%= form.params_check_box :nii_output %>

      <br>

      <%= form.params_label     :gaussian_curvature, "Produce Gaussian curvature maps on surfaces",
                                :title => "Gaussian curvature" %>
      <%= form.params_check_box :gaussian_curvature %>
  </fieldset>
  <P>


<!-- #################################################################### -->

<fieldset>
<legend>Volume Options</legend>

  <%= form.params_label  :model, "Model for volume registration:", :title => "Define the model for image-processing" %>
  <%= form.params_select :model, default_models %>

  <br>

  <%= form.params_label  :template, "Template:", :title => "Define the template for image processing" %>
  <%= form.params_select :template, default_template %>

  <br>

  <%= form.params_label  :lsq, "Degrees of freedom for linear registration:", :title => "Degrees of freedom for linear registration to stereotaxic space.\n0 means that the input volume is already in stereotaxic space and linear registration will be skipped.
" %>
  <%= form.params_select :lsq, default_lsq %>

  <br>

  <%= form.params_label  :interp, "Interpolation:", :title => "Volume interpolation method from native to stereotaxic space (trilinear, tricubic, sinc) default trilinear" %>
  <%= form.params_select :interp, [ "trilinear", "tricubic", "sinc" ] %>

  <br>

  <%= form.params_label      :headheight, "Head height:", :title => "Head height in mm (suggested values: 175 for adults; 165-170 for children)" %>
  <%= form.params_text_field :headheight, :size => 4%>

  <br>

  <%= form.params_label     :mask_blood_vessels, "Mask blood vessels:", :title => "Mask blood vessels" %>
  <%= form.params_check_box :mask_blood_vessels %>

  <br>

  <%= form.params_label      :N3_distance, "N3 distance:", :title => "N3 spline distance in mm (suggested values: 200 for 1.5T scan; 125 or 100 for 3T scan; 0 for MP2RAGE scan in later version than 1.1.12)" %>
  <%= form.params_text_field :N3_distance, :size => 4 %>

  <br>

  <%= form.params_label  :pve, "PVE:", :title => "PVE: advanced = -correct-pve -subcortical -mask-cerebellum\nclassic = -no-correct-pve -no-subcortical -no-mask-cerebellum (old behaviour)" %>
  <%= form.params_select :pve, [ "advanced", "classic" ] %>
</fieldset>

<P>



<!-- #################################################################### -->

<fieldset>
<legend>Surface options</legend>

  <%= form.params_label  :surfreg_model, "Model for surface registration:", :title => "Define the model for surface registration" %>
  <%= form.params_select :surfreg_model, [["NMTmacaque", "NMTmacaque", {}]] %>

  <br>

  <b><%= form.params_label     :no_surfaces, "Do NOT build surfaces:", :title => "Do NOT build surfaces" %></b>
  <%= show_hide_checkbox("#hide_if_not_build_surfaces", :checked => params[:no_surfaces] == "1" || params[:no_surfaces] == "on",
                                                        :invert => true, :name => "cbrain_task[params][no_surfaces]" ) %>

  <br>

  <div id="hide_if_not_build_surfaces", style="padding-left: 10px" >

    <%= form.params_label     :combine_surfaces, "Combine left/right surfaces:", :title => "Combine left and right cortical surfaces" %>
    <%= form.params_check_box :combine_surfaces, :value => "1" %>

    <br>

    <%
       tmethods =  [ "tlink", "tlaplace"]
       if !@task.new_record? && ! @task.params[:thickness_method].blank?
         old_val = @task.params[:thickness_method].to_s
         if old_val =~ /^(tnormal)$/ # old values no longer supported
           tmethods << old_val
         end
       end
       # Add tfs for version >= 2.0.0
       tmethods << [ "tfs", "tfs", {} ]
    %>

    <%= form.params_label  "thickness_method[]",  "Thickness methods:", :title => "Thickness methods" %>
    <%= form.params_select "thickness_method[]", tmethods, {}, :multiple => true, :size => 3 %>
    <%= form.params_label  :thickness_method_for_qc,  "and thickness method for QC:", :title => "and thickness method for QC" %>
    <%= form.params_select :thickness_method_for_qc, tmethods %>

    <p>
    <%= form.params_label      :thickness_kernel, "Thickness kernel size:",
                               :title => "FWHM for surface blurring,\n default: 20 for version 1.1.11 and lower,\n default: 30 for version 1.1.12 and later\nList of integers separated by a ':' is accepted for version 2.0.0 and later" %>
    <%= form.params_text_field :thickness_kernel, :size => 12 %>
    <span class="field_explanation" style="max-width: 80em">(30mm by default if left blank)</span>

    <br>

    <b><%= form.params_label     :resample_surfaces, "Resample surfaces:", :title => "Resample cortical surfaces to obtain elemental vertex areas and volumes" %></b>
    <%= show_hide_checkbox("#hide_if_not_resample_surfaces",
        :checked => params[:resample_surfaces] == "1" || params[:resample_surfaces] == "on",
        :invert => false, :name => "cbrain_task[params][resample_surfaces]" ) %>

    <div id="hide_if_not_resample_surfaces", , style="padding-left: 10px" >
      <%= form.params_label  :atlas, "Surface parcellation:", :title => "Atlas for surface parcellation" %>
      <%= form.params_select :atlas, default_atlas %>

      <br>

      <%= form.params_label      :resample_surfaces_kernel_areas,   " With kernel size areas:",   :title => "FWHM for resampled surface areas\nList of integers separated by a ':'" %>
      <%= form.params_text_field :resample_surfaces_kernel_areas,   :size => 12 %>

      <br>

      <%= form.params_label      :resample_surfaces_kernel_volumes, " With kernel size volumes:", :title => "FWHM for resampled surface volumes\nList of integers separated by a ':'" %>
      <%= form.params_text_field :resample_surfaces_kernel_volumes, :size => 12 %>
    </div>
  </div>
</fieldset>

<P>



<!-- #################################################################### -->

<fieldset>
<legend>VBM Options</legend>

  <b><%= form.params_label     :VBM, "Process VBM files:", :title => "Process VBM files" %></b>
  <%= show_hide_checkbox("#hide_if_not_process_vbm", :checked => params[:VBM] == "1" || params[:VBM] == "on",
                                                     :invert => false, :name => "cbrain_task[params][VBM]" ) %>

  <div id="hide_if_not_process_vbm", , style="padding-left: 10px" >
    <%= form.params_label :VBM_fwhm, "Blurring kernel size in mm for volume:", :title => "Blurring kernel size in mm for volume" %>
    <%= form.params_text_field :VBM_fwhm, :size => 4 %>
    <span class="field_explanation" style="max-width: 80em">(CIVET default if left blank)</span>

    <br>

    <%= form.params_label :VBM_symmetry, "Run symmetry tools:", :title => "Run symmetry tools" %>
    <%= form.params_check_box :VBM_symmetry %>

    <br>

    <%= form.params_label :VBM_cerebellum, "Keep cerebellum in VBM maps:", :title => "Keep cerebellum in VBM maps" %>
    <%= form.params_check_box :VBM_cerebellum %>
  </div>

</fieldset>

<p>

<!-- #################################################################### -->

<fieldset>

<% if ! params[:collection_id].blank? %>
 <legend>MINC file input list for collection <em><%= link_to_userfile_if_accessible params[:collection_id] %></em></legend>
<% else %>
 <legend>MINC file input list</legend>
<% end %>

<table class="simple">
  <tr>
    <th><%= select_all_checkbox 'launch_it', :checked => true %>Launch CIVET?</th>
    <th>T1 name</th>
    <th>Prefix</th>
    <th>Subject ID</th>
    <th>T2 found?</th>
    <th>PD found?</th>
    <th>Mask found?</th>
    <th>MP2 found?</th>
    <th title="Use T1, T2 and PD native files for tissue classification"><%= select_all_checkbox 'use_multispectral' %>Use multispectral?</th>
    <th title="Use T1, T2 and PD native files for brain masking"><%= select_all_checkbox 'use_spectral_mask' %>Use mask?</th>
  </tr>
  <%
    keys = params[:file_args].keys
    keys = keys.sort_by{ |k| params[:file_args][k][:t1_name] || ""}
   %>
  <% keys.each do |idx| %>
    <% file = params[:file_args][idx] %>
     <% if ! params[:collection_id].blank? %>
       <%= render :partial => task_partial('civet_macaque_file_from_col'),  :locals  => {:form => form, :file  => file, :idx => idx } %>
     <% else %>
       <%= render :partial => task_partial('civet_macaque_file_from_list'), :locals  => {:form => form, :file  => file, :idx => idx } %>
     <% end %>
  <% end %>
</table>

<P>

Convenience helper: provide overall patterns for
the <strong>Prefix</strong> and <strong>Subject ID</strong>:

<P>

<%= form.params_label :prefix_auto_comp, "Prefix pattern:" %>     <%= form.params_text_field :prefix_auto_comp %>
<%= form.params_label :dsid_auto_comp,   "Subject ID pattern:" %> <%= form.params_text_field :dsid_auto_comp %>

<P>

The patterns can include special <em>components</em>
<%= show_hide_toggle "(toggle explanation)", "#component_explain", :class  => 'action_link' %>
like <em>{1}</em>, <em>{2}</em> etc which will extract pieces of text from the
<strong>T1 Name</strong>.<br/>

Click <%= submit_tag 'Refresh this list' %> to see all the Prefix and Subject IDs automatically updated.
You can try this as often as you want, until you're satisfied.

<% if ! @task.new_record? %>
 <p>
 <strong>Since this is an existing task, changing any Subject IDs will require a full restart of the pipelines.</strong>
 </p>
<% end %>


<div id="component_explain" style="display:none">

<p>
Components identify the sequences of alphanumeric characters in the T1 filenames,
numbered from 1 to 8.
</p>
<p>
For instance, if a MINC T1 file is named "anonymous_2008-07-10_092900_10_mri.mnc", then its
componants would be:
</p>

      <ul>
        <li>{1} = "anonymous"</li>
        <li>{2} = "2008"</li>
        <li>{3} = "07"</li>
        <li>{4} = "10"</li>
        <li>{5} = "092900"</li>
        <li>{6} = "10"</li>
        <li>{7} = "mri"</li>
        <li>{8} = "mnc"</li>
      </ul>

<p>
As an example, if you entered the pattern "K2-{1}_{6}" for the prefix,
then the actual prefix automatically created for you would be "K2-anonymous_10".
</p>

</div>
</fieldset>

<p/>



<!-- #################################################################### -->

<fieldset>
<legend>Optional Output Renaming <%= show_hide_toggle "(Show)", "#output_renaming", :class  => 'action_link' %></legend>

<div id="output_renaming" style="display: none">

<p>
CIVET's output is saved in CivetOutput files. By default, the names are
composites of the subject ID, the execution server's name and the
task's ID.
</p>
An alternate naming scheme can be provided by entering a pattern here:
<br>
<%= form.params_text_field :output_filename_pattern, :size => 80 %><br>
<small>(Leave blank to let CIVET name the files automatically like it normally does)</small>

<p>
This naming pattern use the same <em>components</em> (like <em>{1}</em>, <em>{2}</em> etc)
described above for the automatic prefix/subject ID pattern matching.<br/>
These components will extract pieces of text from the <strong>T1 Name</strong>.
The naming pattern can also include <em>other special keywords</em><br/>
(like <em>{date}</em>, <em>{run_number}</em> etc) that will be substituted
automatically. The supported keywords are:
</p>

<dl>

  <dt>{date}</dt>
  <dd>The current date in this format: YYYY-MM-DD</dd>

  <dt>{time}</dt>
  <dd>The current time in this format: HH:MM:SS</dd>

  <dt>{task_id}</dt>
  <dd>A unique number ID for each CIVET task, which
      doesn't change even if the task is restarted</dd>

  <dt>{run_number}</dt>
  <dd>A numeric run number that increases everytime the CIVET
      task is restarted, initially set to '1'</dd>

  <dt>{prefix}</dt>
  <dd>The prefix of the CIVET run</dd>

  <dt>{subject}</dt>
  <dd>The subject ID of the CIVET run</dd>

  <dt>{cluster}</dt>
  <dd>The name of the cluster for the run</dd>

</dl>

<p>
<strong>Use these keywords to make sure your your output filenames are unique enough, so that one CIVET<br/>
job's output doesn't crush another job's output!</strong>.
</p>

</div>

</fieldset>

<p>



<!-- #################################################################### -->

<% if @task.new_record? %>
  <%
    bourreau_ids          = @tool_configs.collect { |tc| tc.bourreau }.compact.map(&:id).uniq
    combiner_tool_configs = ToolConfig
                              .where( :bourreau_id => bourreau_ids, :tool_id => CbrainTask::CivetCombiner.tool.id )
                              .all.to_a
    combiner_tool_configs.reject! { |tc| ! tc.can_be_accessed_by?(@task.user) }
    if @tool_config && params[:combiner_tool_config_id].blank?
      params[:combiner_tool_config_id] = combiner_tool_configs.select { |tc|
        tc.bourreau_id == @tool_config.bourreau_id
      }.first.try(:id)
    end
  %>

  <% if combiner_tool_configs.size > 0 %>

    <%
      qc_tool_configs       = ToolConfig
                                .where( :bourreau_id => bourreau_ids, :tool_id => CbrainTask::CivetQc.tool.id )
                                .all.to_a
      qc_tool_configs.reject! { |tc| ! tc.can_be_accessed_by?(@task.user) }
      if @tool_config && params[:qc_tool_config_id].blank?
        params[:qc_tool_config_id] = qc_tool_configs.select { |tc|
          tc.bourreau_id  == @tool_config.bourreau_id  &&
          tc.version_name == @tool_config.version_name
        }.first.try(:id)
      end
    %>

    <P>

    <fieldset>
      <legend>Optional post-CIVET operations <%= show_hide_toggle "(Show)", "#combiner_qc_panel", :class  => 'action_link' %></legend>

      <div id="combiner_qc_panel" style="display: none">

      <div class="medium_paragraphs">
      This panel allows you to configure one or two further tasks to launch.
      First, a <strong>CivetCombiner</strong> task can be created such that once all your CIVETs
      are run, their outputs will be combined into a file of type <em>CivetStudy</em>.
      Second, on that <em>CivetStudy</em>, you can launch a <strong>CivetQC</strong> task
      to perform an analysis of the quality of the results.
      <p>
      <strong>Note that you can also launch these tasks manually separately later on!</strong>
      </div>

      <ul>

      <li>
        Combine CIVET results into a CivetStudy named: <%= form.params_text_field :study_name %>
        using CivetCombiner version: <%= tool_config_select :combiner_tool_config_id.to_la, { :tool_configs => combiner_tool_configs, :selector => params[:combiner_tool_config_id] } %>
      </li>

      <% if qc_tool_configs.size > 0 %>
        <li>
          Launch <%= form.params_check_box :qc_study %> Civet QC script on that CivetStudy
          using CivetQc version: <%= tool_config_select :qc_tool_config_id.to_la, { :tool_configs => qc_tool_configs, :selector => params[:qc_tool_config_id] } %>
        </li>
      <% end %>

      </ul>

      </div>

    </fieldset>
  <% end %>
<% end %>



<!-- #################################################################### -->

<% if current_user.has_role?(:admin_user) %>
 <hr>
 <BIG>Fake run:</BIG><P>
 Enter the numeric ID of a pre-existing CivetOutput to use it as 'pretend' output:
 <%= form.params_text_field :fake_run_civetcollection_id %>

<% end %>

