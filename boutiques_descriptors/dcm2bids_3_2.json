{
  "name": "dcm2bids",
  "tool-version": "3.2.0",
  "author": "Arnaud BorÃ©, Samuel Guay, Christophe Arnaud,  Steven Meisler, Nick GuenTher",
  "online-platform-urls": [
    "https://portal.cbrain.mcgill.ca"
  ],
  "url": "https://unfmontreal.github.io/Dcm2Bids/3.2.0/",
  "descriptor-url": "https://github.com/aces/cbrain-plugins-neuro/blob/master/boutiques_descriptors/dcm2bids_3_2.json",
  "description": "DICOM to BIDS converter. dcm2bids reorganises NIfTI files using dcm2niix into the Brain Imaging Data Structure (BIDS). dcm2bids>=3.0.0 is not compatible with config files made for v2.1.9 ",
  "command-line": "echo you [CITETOOL]d to cite dcm2bids; set  -o pipefail; dcm2bids [DICOM_DIR] [PARTICIPANT] [SESSION] [CONFIG] [OUTPUT_DIR] [AUTO_EXTRACT_ENTITIES] [DO_NOT_REORDER_ENTITIES] [BIDS_VALIDATE] [FORCE_DCM2BIDS] [SKIP_DCM2NIIX] [CLOBBER] [LOG_LEVEL] | sed -r \"s/\\x1B\\[[0-9;]*[mK]//g\"",
  "container-image": {
    "index": "docker://",
    "image": "unfmontreal/dcm2bids:3.2.0",
    "type": "singularity"
  },
  "tags": {
    "domain": [
      "NIfTI",
      "bids",
      "neuroimaging"
    ]
  },
  "inputs": [
    {
      "description": "DICOM directory(ies) or archive(s) (tar, tar.bz2, tar.gz or zip) for given subject. Note, you might need extract subject data from large DICOM dataset, or split the dataset before with appropriate DICOM tool or library ",
      "name": "DICOM subject data",
      "command-line-flag": "-d",
      "optional": false,
      "list": true,
      "type": "File",
      "id": "dicom_dir",
      "value-key": "[DICOM_DIR]"
    },
    {
      "description": "Participant ID, e.g. 0000123",
      "name": "Participant ID",
      "command-line-flag": "-p",
      "optional": false,
      "type": "String",
      "id": "participant",
      "value-key": "[PARTICIPANT]"
    },
    {
      "description": "Session ID, e.g. 001",
      "name": "Session ID",
      "command-line-flag": "-s",
      "optional": true,
      "type": "String",
      "id": "session",
      "value-key": "[SESSION]"
    },
    {
      "description": "JSON configuration file, please create and debug it ahead according to manual at https://unfmontreal.github.io/Dcm2Bids/3.2.0/how-to/create-config-file/ ",
      "name": "Configuration file",
      "command-line-flag": "-c",
      "optional": false,
      "type": "File",
      "id": "config",
      "value-key": "[CONFIG]"
    },
    {
      "description": "Existing BIDS dataset or stub, provide it if you like to add a new subject into that BIDS directory",
      "name": "Place the subject directory into this BIDS dataset or stub",
      "command-line-flag": "-o",
      "optional": true,
      "type": "File",
      "id": "output_dir",
      "value-key": "[OUTPUT_DIR]"
    },
    {
      "description": "If set, it will automatically try to extract entity information [task, dir, echo] based on the suffix and datatype. ",
      "name": "Auto extract entities",
      "command-line-flag": "--auto_extract_entities",
      "optional": true,
      "type": "Flag",
      "id": "auto_extract_entities",
      "value-key": "[AUTO_EXTRACT_ENTITIES]",
      "default-value": true
    },
    {
      "description": "If set, it will not reorder entities according to the relative ordering indicated in the BIDS specification and use the order defined in custom_entities by the user.\nCannot be used with --auto_extract_entities.  [%(default)s]",
      "name": "Do not reorder entities",
      "command-line-flag": "--do_not_reorder_entities",
      "optional": true,
      "type": "Flag",
      "id": "do_not_reorder_entities",
      "value-key": "[DO_NOT_REORDER_ENTITIES]"
    },
    {
      "description": "If set, once your conversion is done it will check if your output folder is BIDS valid. ",
      "name": "BIDS validate",
      "command-line-flag": "--bids_validate",
      "optional": true,
      "type": "Flag",
      "id": "bids_validate",
      "value-key": "[BIDS_VALIDATE]"
    },
    {
      "description": "Overwrite previous temporary dcm2bids output if it exists.",
      "name": "Overwrite tmp data",
      "command-line-flag": "--force_dcm2bids",
      "optional": true,
      "type": "Flag",
      "id": "force_dcm2bids",
      "value-key": "[FORCE_DCM2BIDS]"
    },
    {
      "description": "Skip dcm2niix conversion. One of directories supplied with option -d should contains NIFTI and json files.",
      "name": "Skip dcm2niix",
      "command-line-flag": "--skip_dcm2niix",
      "optional": true,
      "type": "Flag",
      "id": "skip_dcm2niix",
      "value-key": "[SKIP_DCM2NIIX]",
      "requires-inputs": ["dicom_dir"]
    },
    {
      "description": "Overwrite output if it exists.",
      "name": "Clobber",
      "command-line-flag": "--clobber",
      "optional": true,
      "type": "Flag",
      "id": "clobber",
      "value-key": "[CLOBBER]"
    },
    {
      "default-value": "INFO",
      "description": "Set logging level to the console.",
      "name": "Log level",
      "value-choices": [
        "DEBUG",
        "INFO",
        "WARNING",
        "ERROR",
        "CRITICAL"
      ],
      "optional": true,
      "command-line-flag": "-l",
      "type": "String",
      "id": "log_level",
      "value-key": "[LOG_LEVEL]"
    },
    {
      "description": "If you use dcm2bids in your research or as part of your developments, please always cite it",
      "name": "Agreement",
      "optional": false,
      "type": "String",
      "id": "agreement",
      "value-key": "[CITETOOL]",
      "value-choices": [
        "agree"
      ]
    }
  ],
  "output-files": [
    {
      "name": "Output BIDS SUBJECT directory",
      "id": "bids_subject",
      "description": "the bids subject folder sub-xxxxx",
      "list": false,
      "path-template": "sub-[PARTICIPANT]"
    },
    {
      "name": "Output BIDS directory",
      "id": "bids",
      "description": "the existing bids folder or stub, where the subject will be added",
      "optional": true,
      "list": false,
      "path-template": "[OUTPUT_DIR]",
      "command-line-flag": "-o"
    }
  ],
  "suggested-resources": {
    "ram": 1,
    "walltime-estimate": 24000,
    "cpu-cores": 1
  },
  "custom": {
    "cbrain:readonly-input-files": true,
    "cbrain:author": "Serge Boroday <serge.boroday@mcin.ca>",
    "cbrain:integrator_modules": {
      "BoutiquesFileTypeVerifier": {
        "dicom_dir": [
          "DicomCollection",
          "TarArchive",
          "ZipArchive"
        ]
      },
      "BoutiquesOutputFileTypeSetter": {
        "bids_subject": "BidsSubject"
      }
    }
  },
  "schema-version": "0.5"
}
