{
  "name":         "FMRIprepBidsSubject",
  "tool-version": "23.0.2",
  "author":       "Poldrack lab",
  "url":          "https://fmriprep.readthedocs.io",
  "command-line": "fmriprep [BIDS_DIR] [OUTPUT_DIR] participant --skip_bids_validation [TASK_ID] --nthreads 2 --omp-nthreads 2 --mem_mb 30000 [LOW_MEM] [BIDS_FILTER_FILE] [ANAT_ONLY] [OUTPUT_SPACES] [BOILERPLATE] [VERBOSE_COUNT] [IGNORE] [LONGITUDINAL] [BOLD2T1W_DOF] [USE_BBR] [MEDIAL_SURFACE_NAN] [USE_AROMA] [AROMA_MELODIC_DIMENSIONALITY] [SKULL_STRIP_TEMPLATE] [SKULL_STRIP_FIXED_SEED] [FMAP_BSPLINE] [FMAP_NO_DEMEAN] [USE_SYN_SDC] [FORCE_SYN] [FS_LICENSE] [HIRES] [CIFTI_OUTPUT] [RUN_RECONALL] [RESOURCE_MONITOR] [REPORTS_ONLY] [RUN_UUID] [WRITE_GRAPH] [STOP_ON_FIRST_CRASH] [NOTRACK] [SLOPPY]",
  "description":  "fMRIprep is a functional magneticresonance image pre-processing pipeline that is designed to provide an easily accessible, state-of-the-art interface that is robust to differences in scan acquisition protocols and that requires minimal user input, while providing easily interpretable and comprehensive error and output reporting (https://fmriprep.readthedocs.io). NOTE: This descriptor is designed to integrate specifically with a CBRAIN installation. It takes as input a single subject according to the BIDs specification",
  "schema-version": "0.5",
  "container-image": {
    "type": "singularity",
    "index": "docker://",
    "image": "nipreps/fmriprep:23.0.2"
  },
  "inputs": [
    {
      "description": "BIDS dataset input file",
      "id":          "bids_dir",
      "name":        "BIDS dataset",
      "optional":    false,
      "type":        "File",
      "value-key":   "[BIDS_DIR]"
    },
    {
      "description":   "The name of the output",
      "id":            "output_dir_name",
      "name":          "Name of output",
      "type":          "String",
      "optional":      false,
      "default-value": "{full_noex}-{task_id}",
      "value-key":     "[OUTPUT_DIR]"
    },
    {
      "description":       "The FreeSurfer license key file",
      "id":                "fs_license_file",
      "name":              "FreeSurfer license",
      "type":              "File",
      "optional":          false,
      "command-line-flag": "--fs-license-file",
      "value-key":         "[FS_LICENSE]"
    },
    {
      "description":       "List of output spaces",
      "id":                "output_spaces",
      "name":              "Output Spaces",
      "type":              "String",
      "optional":          true,
      "command-line-flag": "--output-spaces",
      "value-key":         "[OUTPUT_SPACES]",
      "list":              true,
      "list-separator":    " ",
      "value-choices": [
        "T1w",
        "anat",
        "template",
        "fsnative",
        "fsaverage",
        "fsaverage5",
        "fsaverage6",
        "MNI152NLin6Asym",
        "MNI152NLin2009cAsym",
        "MNI152NLin2009cAsym:res-1",
        "MNI152NLin2009cAsym:res-2"
      ]
    },
    {
      "description":       "Select a specific task to be processed",
      "id":                "task_id",
      "name":              "Task ID",
      "type":              "String",
      "optional":          true,
      "command-line-flag": "-t",
      "value-key":         "[TASK_ID]"
    },
    {
      "description":       "Attempt to reduce memory usage (will increase disk usage in working directory)",
      "id":                "low_mem",
      "name":              "Low memory mode",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--low-mem",
      "value-key":         "[LOW_MEM]"
    },
    {
      "description":       "A JSON file containing PyBIDS filter rules",
      "id":                "pybids_file",
      "name":              "PyBIDS filter file",
      "type":              "File",
      "optional":          true,
      "command-line-flag": "--bids-filter-file",
      "value-key":         "[BIDS_FILTER_FILE]"
    },
    {
      "description":       "Run anatomical workflows only",
      "id":                "anat_only",
      "name":              "Anatomical processing only",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--anat-only",
      "value-key":         "[ANAT_ONLY]"
    },
    {
      "description":       "Generate boilerplate only",
      "id":                "boilerplate",
      "name":              "Generate boilerplate only",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--boilerplate",
      "value-key":         "[BOILERPLATE]"
    },
    {
      "description":       "Increases log verbosity for each occurence, debug level is -vvv",
      "id":                "verbose_count",
      "name":              "Verbose output",
      "type":              "String",
      "optional":          true,
      "value-key":         "[VERBOSE_COUNT]",
      "value-choices": [
        "-v",
        "-vv",
        "-vvv"
      ]
    },
    {
      "description":       "Ignore selected aspects of the input dataset to disable corresponding parts of the workflow",
      "id":                "ignore",
      "name":              "Ignore some input data",
      "type":              "String",
      "optional":          true,
      "command-line-flag": "--ignore",
      "value-key":         "[IGNORE]",
      "list": true,
      "value-choices": [
        "fieldmaps",
        "slicetiming",
        "sbref"
      ]
    },
    {
      "description":       "Treat dataset as longitudinal - may increase runtime",
      "id":                "longitudinal",
      "name":              "Process dataset as longitudinal",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--longitudinal",
      "value-key":         "[LONGITUDINAL]"
    },
    {
      "description":       "Degrees of freedom when registering BOLD to T1w images. 6 degrees (rotation and translation) are used by default.",
      "id":                "bold2t1w_dof",
      "name":              "BOLD to T1w registration degrees of freedom",
      "type":              "Number",
      "optional":          true,
      "command-line-flag": "--bold2t1w-dof",
      "value-key":         "[BOLD2T1W_DOF]",
      "value-choices": [
        6,
        9,
        12
      ],
      "default-value": 6
    },
    {
      "description":       "Always use boundary-based registration (no goodness-of-fit checks)",
      "id":                "use_bbr",
      "name":              "Force boundary-based registration",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--force-bbr",
      "value-key":         "[USE_BBR]"
    },
    {
      "description":       "Replace medial wall values with NaNs on functional GIFTI files. Only performed for GIFTI files mapped to a freesurfer subject (fsaverage or fsnative).",
      "id":                "medial_surface_nan",
      "name":              "Medial surface NaN",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--medial-surface-nan",
      "value-key":         "[MEDIAL_SURFACE_NAN]"
    },
    {
      "description":       "Add ICA_AROMA to your preprocessing stream",
      "id":                "use_aroma",
      "name":              "Use ICA_AROMA",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--use-aroma",
      "value-key":         "[USE_AROMA]"
    },
    {
      "description":       "Exact or maximum number of MELODIC components to estimate (positive = exact, negative = maximum)",
      "id":                "aroma_melodic_dimensionality",
      "name":              "AROMA MELODIC dimensionality",
      "type":              "Number",
      "optional":          true,
      "command-line-flag": "--aroma-melodic-dimensionality",
      "value-key":         "[AROMA_MELODIC_DIMENSIONALITY]",
      "default-value":     -200
    },
    {
      "description":       "Select ANTs skull-stripping template (default: OASIS30ANTs))",
      "id":                "skull_strip_template",
      "name":              "ANTs skull strip template",
      "type":              "String",
      "optional":          true,
      "command-line-flag": "--skull-strip-template",
      "value-key":         "[SKULL_STRIP_TEMPLATE]",
      "value-choices": [
        "OASIS30ANTs"
      ],
      "default-value":     "OASIS30ANTs"
    },
    {
      "description":       "Do not use a random seed for skull-stripping - will ensure run-to-run replicability when used with --omp-nthreads 1",
      "id":                "skull_strip_fixed_seed",
      "name":              "Fixed skull strip seed",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--skull-strip-fixed-seed",
      "value-key":         "[SKULL_STRIP_FIXED_SEED]"
    },
    {
      "description":       "Fit a B-Spline field using least-squares (experimental)",
      "id":                "fmap_bspline",
      "name":              "Least Squares B-Spline field",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--fmap-bspline",
      "value-key":         "[FMAP_BSPLINE]"
    },
    {
      "description":       "Do not remove median (within mask) from fieldmap",
      "id":                "fmap_no_demean",
      "name":              "Fieldmap keeps median",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--fmap-no-demean",
      "value-key":         "[FMAP_NO_DEMEAN]"
    },
    {
      "description":       "EXPERIMENTAL: Use fieldmap-free distortion correction",
      "id":                "use_syn_sdc",
      "name":              "Use SyN distortion correction",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--use-syn-sdc",
      "value-key":         "[USE_SYN_SDC]"
    },
    {
      "description":       "EXPERIMENTAL/TEMPORARY: Use SyN correction in addition to fieldmap correction, if available",
      "id":                "force_syn",
      "name":              "Force SyN correction",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--force-syn",
      "value-key":         "[FORCE_SYN]"
    },
    {
      "description":       "Disable sub-millimeter (hires) reconstruction",
      "id":                "hires",
      "name":              "Disable hires reconstruction",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--no-submm-recon",
      "value-key":         "[HIRES]"
    },
    {
      "description":       "Output BOLD files as CIFTI dtseries",
      "id":                "cifti_output",
      "name":              "CIFTI output",
      "type":              "String",
      "optional":          true,
      "command-line-flag": "--cifti-output",
      "value-key":         "[CIFTI_OUTPUT]",
      "value-choices": [
        "91k",
        "170k"
      ]
    },
    {
      "description":       "Disable FreeSurfer surface preprocessing.",
      "id":                "run_reconall",
      "name":              "Disable FreeSurfer ReconAll",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--fs-no-reconall",
      "value-key":         "[RUN_RECONALL]"
    },
    {
      "description":       "Enable Nipype's resource monitoring to keep track of memory and CPU usage",
      "id":                "resource_monitor",
      "name":              "NiPype resource monitoring",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--resource-monitor",
      "value-key":         "[RESOURCE_MONITOR]"
    },
    {
      "description":       "Only generate reports, don't run workflows. This will only rerun report aggregation, not reportlet generation for specific nodes.",
      "id":                "reports_only",
      "name":              "Reports only",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--reports-only",
      "value-key":         "[REPORTS_ONLY]"
    },
    {
      "description":       "Specify UUID of previous run, to include error logs in report. No effect without --reports-only.",
      "id":                "run_uuid",
      "name":              "Previous run UUID",
      "type":              "String",
      "optional":          true,
      "command-line-flag": "--run-uuid",
      "value-key":         "[RUN_UUID]"
    },
    {
      "description":       "Write workflow graph.",
      "id":                "write_graph",
      "name":              "Write workflow graph",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--write-graph",
      "value-key":         "[WRITE_GRAPH]"
    },
    {
      "description":       "Force stopping on first crash, even if a work directory was specified.",
      "id":                "stop_on_first_crash",
      "name":              "Stop on first crash",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--stop-on-first-crash",
      "value-key":         "[STOP_ON_FIRST_CRASH]"
    },
    {
      "description":       "Opt-out of sending tracking information of this run to the FMRIPREP developers. This information helps to improve FMRIPREP and provides an indicator of real world usage crucial for obtaining funding.",
      "id":                "notrack",
      "name":              "Do not track",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--notrack",
      "value-key":         "[NOTRACK]"
    },
    {
      "description":       "Use low-quality tools for speed - TESTING ONLY",
      "id":                "sloppy",
      "name":              "Sloppy processing",
      "type":              "Flag",
      "optional":          true,
      "command-line-flag": "--sloppy",
      "value-key":         "[SLOPPY]"
    }
  ],
  "groups": [
    {
      "name":        "Memory and Parallel Control Parameters",
      "description": "Parameters used to define memory requirements and multithreading",
      "id":          "memory_and_parallelism",
      "members": [
        "low_mem",
        "sloppy"
      ]
    },
    {
      "name":        "Debugging Parameters",
      "description": "Diagnostic parameters for debugging fMRIprep",
      "id":          "debugging",
      "members": [
        "task_id",
        "verbose_count",
        "resource_monitor",
        "reports_only",
        "run_uuid",
        "stop_on_first_crash",
        "notrack",
        "write_graph"
      ]
    },
    {
      "name":        "Experimental Parameters",
      "description": "Parameters that one should use at their own risk.",
      "id":          "experimental",
      "members": [
        "use_syn_sdc",
        "force_syn"
      ]
    }
  ],
  "output-files" : [
    {
      "name":          "Output Directory",
      "description":   "This is the directory where the overall outputs are to be stored.",
      "id":            "output_dir",
      "path-template": "[OUTPUT_DIR]",
      "optional":      false
    }
  ],
  "suggested-resources": {
    "cpu-cores":         4,
    "ram":               4,
    "walltime-estimate": 172000
  },
  "tags": {
    "application-type": [
      "bids"
    ],
    "domain": [
      "neuroinformatics",
      "fmri"
    ]
  },
  "custom": {
    "cbrain:readonly-input-files": true,
    "cbrain:author": "Natacha Beck <natacha.beck@mcgill.ca>, Pierre Rioux <pierre.rioux@mcgill.ca>",
    "cbrain:integrator_modules": {
      "BoutiquesFileTypeVerifier": {
        "bids_dir":        [ "BidsSubject" ],
        "fs_license_file": [ "FreesurferLicense", "TextFile", "SingleFile" ]
      },
      "BoutiquesFileNameMatcher": {
        "bids_dir": "^sub-[a-zA-Z0-9_]+$"
      },
      "BoutiquesFreesurferLicenseFinder": "fs_license_file",
      "BoutiquesOutputFileTypeSetter": {
        "output_dir": "FmriPrepOutput"
      },
      "BoutiquesPostProcessingCleaner": [
        "work",
        "[OUTPUT_DIR]"
      ],
      "BoutiquesBidsSingleSubjectMaker": "bids_dir",
      "BoutiquesInputCacheCleaner": [ "bids_dir" ],
      "BoutiquesOutputCacheCleaner": [ "output_dir" ],
      "BoutiquesOutputFilenameRenamer": {
        "output_dir": [ "bids_dir", "output_dir_name" ]
      }
    }
  }
}
